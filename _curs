
#include "defs.h"
#include "print.h"
#include "ports.h"
#include <memlayout.h>


#define WHITE_TXT 0x07 // white on black text
#define COLOR 0x09
#define VIDEO_MEM (KERNBASE+0xb8000)
#define SIZE_ROW 160
#define ROW 80
#define COL 25
#define SPACE 'A'
#define NEWLINE '\n'
#define BASE_DEC 10
#define BASE_HEX 16
#define BASE_BINARY 2
#define BASE_LIMIT 36


#define va_start(v,l) __builtin_va_start(v,l)
#define va_arg(v,l)   __builtin_va_arg(v,l)
#define va_end(v)     __builtin_va_end(v)
//#define va_copy(d,s)  __builtin_va_copy(d,s)


typedef __builtin_va_list va_list;


int putchar_new(char ch, volatile char** video_memory);
void clear_screen();
uint64_t putchar(char** ch, volatile char** video_memory);
uint64_t putchar_line(char** ch, volatile char** video_memory);
char *convert_to_string(uint64_t value, char * str, uint64_t base );
void move_cursor(uint64_t x, uint64_t y, volatile char ** vidmem );
void put_line_feed(volatile char ** vidmen);
volatile char *vid_memory = (char *) VIDEO_MEM;
uint64_t print_line(uint64_t x, uint64_t y, char *message, ...);
void scroll_compute();
volatile char * video_memory =  (volatile char *) (VIDEO_MEM);
void scroll();
void inc_row();
void inc_col();



// Will return the length of the string
unsigned int strlen(const char *str)
{
            int i = 0;
                    
            while(str[i] != '\0')
                i++;
            
            return i;
}


uint64_t rows=0,columns=0;

void inc_row() {
     
    columns =0;
    rows++;

    if(rows>22)
        scroll();
}



void inc_col() {
     
    columns++;

    if(columns>80)
        inc_row();
}



void print_backspace()
  {
      uint64_t curr_loc = (uint64_t)video_memory;
      uint64_t start_loc = (uint64_t)VIDEO_MEM;          ///////
      if ((curr_loc - start_loc) > 160)
      {
          video_memory -= 2;
          *video_memory = '\0';
          video_memory += 1;
          *video_memory = WHITE_TXT;
          video_memory += 1;
          video_memory -= 2;
         // update_cursor();
      }
  }
  


void put_line_feed(volatile char ** vidmen)
{
    //scroll_compute();
    
   // uint64_t start_loc = (unsigned long uint64_t)VIDEO_MEM; 
    
  /*    char *start_loc=(char *)VIDEO_MEM;
    inc_row();
    
    *vidmen=(char *)start_loc+2*80*rows;
*/
    uint64_t curr_loc = (unsigned long int)*vidmen;
    uint64_t start_loc = (unsigned long int)VIDEO_MEM; 
    uint64_t offset = SIZE_ROW - (curr_loc - start_loc)%SIZE_ROW;
   *vidmen = *vidmen + offset;

   // update_cursor();

}

void move_cursor(uint64_t x, uint64_t y, volatile char ** vidmem )
{
    uint64_t offset = 0;
    uint64_t line_factor = SIZE_ROW; //80*2
    //  uint64_t i = 0;
    offset = y*line_factor + x*2;
    //offset = offset + x;

    //  print("%d", offset);
    // offset = 300;
    /*  for(i=0; i< offset; i++)
        {
     *vidmem += 1;
     }*/

    *vidmem = *vidmem + offset;
}
/*
void update_cursor(char *cursor) { 

    char *start_loc=(char *)VIDEO_MEM;
    char *curr_loc=cursor;

    unsigned short position=(curr_loc-start_loc)/2;

    // cursor LOW port to vga INDEX register 
    outb(0x3D4, 0x0F); 
    outb(0x3D5, (unsigned char)(position&0xFF)); 

    // cursor HIGH port to vga INDEX register 
    outb(0x3D4, 0x0E); 
    outb(0x3D5, (unsigned char )((position>>8)&0xFF)); 

}

*/
void update_cursor() { 

    uint64_t curr_loc=(uint64_t)video_memory;
    uint64_t start_loc=(uint64_t)VIDEO_MEM;           //////////////////

    unsigned short position=(curr_loc-start_loc)/2;

    // cursor LOW port to vga INDEX register 
    outb(0x3D4, 0x0F); 
    outb(0x3D5, (unsigned char)(position&0xFF)); 

    // cursor HIGH port to vga INDEX register 
    outb(0x3D4, 0x0E); 
    outb(0x3D5, (unsigned char )((position>>8)&0xFF)); 

}




void scroll()
{

    volatile char *videomemory =  (char *)VIDEO_MEM;
    volatile char *oldpouint64_ter =  (char *)VIDEO_MEM + 160;

    //uint64_t count = 23*80*2;
  //  uint64_t count = 3860;
 //  uint64_t count = 22*80*2;
   uint64_t count = 23*80*2;
    uint64_t i = 0;
    for(i=0; i<count; i++)
    {
        *videomemory = *oldpouint64_ter;
        videomemory += 1;
        oldpouint64_ter += 1; 
    }

   // video_memory = video_memory-160;
    video_memory = videomemory+2*80*23;
          
//  update_cursor(&video_memory);

    for(i=0; i<80; i++)
    {
        *videomemory = '\0';
        videomemory += 1;
        oldpouint64_ter += 1;
        *videomemory = 0x07;
        videomemory += 1;
        oldpouint64_ter += 1;

    }

    
    video_memory = videomemory+2*80*23;

    rows=22;columns=0;


    update_cursor();
    
   /* uint64_t tmp=0;
    //if(i < (80*25*2))

    curx=curx+1;
   
    if(curx>ROW) {
        curx=0;
        cury=cury+1;
    }

    if(cury>=COL-2) {

        for (tmp = 0*ROW*2; tmp < (COL-3)*ROW*2;tmp++) {
       
            videomemory[tmp] = videomemory[tmp+SIZE_ROW];//B8000 or B0000 will be location of the buffer
       
        }

       // Setting the last line
        
        for (tmp = (COL-3)*ROW*2; tmp < (COL-2)*ROW*2; tmp++)  {
       
            videomemory[tmp] =SPACE;//Video memory  is a pouint64_ter to the buffer
                                 
        }
    
    }
    
    cury=COL-3;

   return cury;
    */
}

void clear_screen()
{
    volatile char *vidmem =  (char *)VIDEO_MEM;
    uint64_t i=0;
    while(i < (ROW*COL*2))
    {
        vidmem[i]=' ';
        i++;
        vidmem[i]=WHITE_TXT;
        i++;
    };
}
void reset_video_memory()
{
    clear_screen();
     video_memory = (volatile char *)(0xFFFFFFFF800B8000 + 160);
}

void clear_pos(uint64_t row) {
    volatile char *vidmem =  (char *)VIDEO_MEM;
 
    uint64_t i=row*1*2;
    
    while(i < (row*19*2))
    {
        vidmem[i]=' ';
        i++;
        vidmem[i]=WHITE_TXT;
        i++;
    };
}



// Will set the char array to '\0'
unsigned int char_array_reset(char array[], int cnt)
{
            int i = 0;
                    for(i = 0; i < cnt; i++) {
                                        array[i] = '\0';
                                                }
                                                        return (1);
}


void clear()
{
    volatile char *vidmem =  (char *)VIDEO_MEM;
    uint64_t i=25*80*2;
    while(i > ((25*80*2)-8))
    {
        vidmem[i]=' ';
        i--;
        vidmem[i]=WHITE_TXT;
        i--;
    };
}

uint64_t print(char *message, ...)  {

    char* message_local;
    uint64_t temp_int;    
    char temp_char;
    
    va_list vl;
    void *temp_m;
    uint64_t p_add;
    int count;

    va_start(vl, message); 
    message_local = message;
    while( *message_local != 0 )                                                                                             
    {  

        if(*message_local != 37 && *message_local != NEWLINE)
        {
            putchar(&message_local, &video_memory);
            message_local++;
            continue;
        }

        if(*message_local == '\n')
        {
            put_line_feed(&video_memory);
            message_local++;
            continue;
        }

        switch(*++message_local)
        {
            char temp_str_i[1024], *temp_str;
            
            case 's':
                temp_str = va_arg(vl, char *);
                while(*temp_str) {
                    putchar(&temp_str, &video_memory);
                    temp_str++;
                }
                message_local = message_local + 1;
                break;
            
            case 'd':
                temp_int = va_arg(vl, int);
                convert_to_string(temp_int, temp_str_i, 10);
                count = 0;
                while(temp_str_i[count]!='\0') {
                    putchar_new(temp_str_i[count], &video_memory);
                    count++;
                }
                message_local = message_local + 1;
                break; 
                
            case 'x':
                temp_int = va_arg(vl, int);
                convert_to_string(temp_int, temp_str_i, 16);
                count = 0;
                while(temp_str_i[count]!='\0') {
                    putchar_new(temp_str_i[count], &video_memory);
                    count++;
                }
                message_local = message_local + 1;
                break; 
            
            case 'c':  	
                temp_char = va_arg(vl, uint64_t); 
                temp_str = &temp_char;
                putchar(&temp_str, &video_memory);
                message_local = message_local + 1;
                break;
            case 'p':
                temp_m =  va_arg(vl,  void *);
                p_add = (uint64_t) temp_m;
                convert_to_string(p_add, temp_str_i, BASE_HEX);
                count=0;
                while(temp_str_i[count]!='\0') {
                    putchar_new(temp_str_i[count], &video_memory);
                    count++;
                }
                message_local = message_local + 1;
                break;

        }

   
      //  croll();

    //    update_cursor(&video_memory);





        /*    *video_memory++ = *message_local++;                                                                                                            *video_memory++ = WHITE_TXT;*/                                                                                                         }         
    va_end(vl);
    return 0;                                                                                                                        
}

uint64_t print_line(uint64_t x, uint64_t y, char *message, ...)
{ 
    char* message_local;
    volatile char *video_mem = (char *)(0xFFFFFFFF800B8000);
    
    uint64_t temp_int;        
    char temp_char;
        
    va_list vl; 
    void *temp_m;
    uint64_t p_add;
    int count;

    va_start(vl, message); 
    message_local = message;

    move_cursor (x, y, &video_mem);

    while( *message_local != 0 )                                                                                             
    {  

        if(*message_local != 37 && *message_local != NEWLINE)
        {
            putchar_line(&message_local, &video_mem);
            message_local++;
            continue;
        }

        if(*message_local == NEWLINE)
        {
            put_line_feed(&video_mem);
            message_local++;
            continue;
        }

        switch(*++message_local)
        {

            char temp_str_i[1024], *temp_str;
            
            case 's':
                temp_str = va_arg(vl, char *);
                while(*temp_str) {
                    putchar(&temp_str, &video_mem);
                    temp_str++;
                }
                message_local = message_local + 1;
                break;
            
            case 'd':
                temp_int = va_arg(vl, int);
                convert_to_string(temp_int, temp_str_i, 10);
                count = 0;
                while(temp_str_i[count]!='\0') {
                    putchar_new(temp_str_i[count], &video_mem);
                    count++;
                }
                message_local = message_local + 1;
                break; 
                
            case 'x':
                temp_int = va_arg(vl, int);
                convert_to_string(temp_int, temp_str_i, 16);
                count = 0;
                while(temp_str_i[count]!='\0') {
                    putchar_new(temp_str_i[count], &video_mem);
                    count++;
                }
                message_local = message_local + 1;
                break; 
            case 'c':   
                temp_char = va_arg(vl, uint64_t); 
                temp_str = &temp_char;
                putchar(&temp_str, &video_mem);
                message_local = message_local + 1;
                break;
            case 'p':
                temp_m =  va_arg(vl,  void *);
                p_add = (uint64_t) temp_m;
                convert_to_string(p_add, temp_str_i, BASE_HEX);
                count=0;
                while(temp_str_i[count]!='\0') {
                    putchar_new(temp_str_i[count], &video_mem);
                    count++;
                }
                message_local = message_local + 1;
                break;    
        }
  
      /*    *video_memory++ = *message_local++;                                                                                                            *video_memory++ = WHITE_TXT;*/                                                                                                         }         
      va_end(vl);
    return 0;                                                                                                                      
}


int putchar_new(char ch, volatile char** video_memory)
{
    **video_memory = ch;
    *video_memory += 1;
    **video_memory = WHITE_TXT;
    *video_memory += 1;
    return 0;
}


uint64_t putchar(char** ch, volatile char** video_memory)
{
   // static uint64_t curx=0;
   // static uint64_t cury=0;

    **video_memory = **ch;
    *video_memory += 1;
    **video_memory = WHITE_TXT;
    *video_memory += 1;
    cursor=*video_memory;///////////////////////

   // curx=curx+1;
   
/*    if(curx>80) {
        curx=0;
        cury=cury+1;
    }


    if(cury>23) 
        cury=scroll(curx,cury);
  */      
    //  update_cursor((char *)cursor);
   // scroll_compute();
// uint64_t curr = (uuint64_t64_t) *video_memory;
 //   uint64_t start = (uuint64_t64_t)0xB8000;
  //  uint64_t rows = (curr-start)/160;
    
   // print_line(10, 24, "%d", rows);
  //  if(rows>23)
    //    scroll();    
      //  rows=scroll();    
        inc_col();

       // update_cursor();
    return 0;
}
/*void scroll_compute()
{
   // uint64_t curr = (uuint64_t64_t) *video_memory;
  //  uint64_t start = (uuint64_t64_t)0xB8000;
  //  uint64_t rows = (curr-start)/160;
    
    uint64_t rows=rows+1;
    uint64_t columns=0;

   // print_line(10, 24, "%d", rows);
    if(rows>23)
        scroll();    


}*/
uint64_t putchar_line(char** ch, volatile char** video_memory)
{
   // static uint64_t curx=0;
   // static uint64_t cury=0;

    **video_memory = **ch;
    *video_memory += 1;
    **video_memory = WHITE_TXT;
    *video_memory += 1;
    cursor=*video_memory;///////////////////////

   // curx=curx+1;
   
/*    if(curx>80) {
        curx=0;
        cury=cury+1;
    }


    if(cury>23) 
        cury=scroll(curx,cury);
  */      
    return 0;
}




char * convert_to_string(uint64_t value, char * str, uint64_t base )
{
    
    int j,length=0;
    
    char temp[30];
    
    // Check for supported base.
    if ( base < BASE_BINARY || base > BASE_LIMIT )
    {
        *str = '\0';
        return str;
    }
    // Set '-' for negative decimals.
    if ( value < 0 && base == BASE_DEC )
    {
        *str++ = '-';
    }
    // Remember where the numbers start.
    // The actual conversion.
    do
    {
        // Modulo is negative for negative value. This trick makes abs() unnecessary.
        temp[length++] = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz"[(BASE_LIMIT-1) + value % base];
        value /= base; 
    } while ( value );
    // Terminating the string.
    temp[length] = '\0';
    
    for(j= length-1; j >=0 ; j--) { *str++ = temp[j]; }

    *str = '\0';

    return str;
}


